Elm.Parsing = Elm.Parsing || {};
Elm.Parsing.make = function (_elm) {
   "use strict";
   _elm.Parsing = _elm.Parsing || {};
   if (_elm.Parsing.values) return _elm.Parsing.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var stringContainsX = function (s) {    return A2($String.contains,"x",s);};
   var parseStringToCompute = function (s) {
      var isNotSpace = function (x) {    return !_U.eq(x," ") && !_U.eq(x,"");};
      return A2($List.filter,isNotSpace,A2($String.split," ",s));
   };
   var negateString = function (s) {
      var n = $String.length(s);
      return A2($String.startsWith,"~",s) ? A2($Basics._op["++"],"~",s) : A3($String.slice,1,n - 1,s);
   };
   var pickOutElem = function (l) {
      var _p0 = l;
      if (_p0.ctor === "::") {
            if (_p0._1.ctor === "[]") {
                  return _p0._0;
               } else {
                  return _p0._0;
               }
         } else {
            return _U.crashCase("Parsing",{start: {line: 19,column: 3},end: {line: 22,column: 42}},_p0)("pickOutElem failed");
         }
   };
   var plusOrMin = function (s) {
      var fullList = A2($String.split," ",s);
      var n = $String.length(s);
      var lastElem = A2($List.drop,$List.length(fullList) - 1,fullList);
      var lastElemStr = pickOutElem(lastElem);
      return _U.eq(lastElemStr,"~") ? A3($String.slice,0,n - 1,s) : A2($String.join," ",A2($List.append,fullList,_U.list(["~"])));
   };
   var backspace = function (s) {
      var n = $String.length(s);
      if (_U.cmp(n,0) < 1) return s; else {
            var fullList = A2($String.split,"",s);
            var lastElem = A2($List.drop,$List.length(fullList) - 1,fullList);
            var lastElemStr = pickOutElem(lastElem);
            return _U.eq(lastElemStr," ") ? A3($String.slice,0,n - 2,s) : A3($String.slice,0,n - 1,s);
         }
   };
   var isNumber = function (s) {    var _p2 = $String.toInt(s);if (_p2.ctor === "Ok") {    return true;} else {    return false;}};
   return _elm.Parsing.values = {_op: _op
                                ,isNumber: isNumber
                                ,pickOutElem: pickOutElem
                                ,plusOrMin: plusOrMin
                                ,negateString: negateString
                                ,backspace: backspace
                                ,parseStringToCompute: parseStringToCompute
                                ,stringContainsX: stringContainsX};
};