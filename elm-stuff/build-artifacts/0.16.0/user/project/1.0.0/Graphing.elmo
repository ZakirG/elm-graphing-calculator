Elm.Graphing = Elm.Graphing || {};
Elm.Graphing.make = function (_elm) {
   "use strict";
   _elm.Graphing = _elm.Graphing || {};
   if (_elm.Graphing.values) return _elm.Graphing.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Functions = Elm.Functions.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm);
   var _op = {};
   var ySizeUp = function (size) {    return _U.cmp(size,10.0) > 0 ? size + 11.0 : _U.cmp(size,5.0) > 0 ? size + 5.0 : size + 2.0;};
   var graphStepCalc = function (size) {    return _U.cmp(size,14.0) > 0 ? 4.0 : _U.cmp(size,8.0) > 0 ? 2.0 : 1.0;};
   var initGraphState = {ctor: "_Tuple2",_0: _U.list([]),_1: {ctor: "_Tuple2",_0: -5.0,_1: 5.0}};
   var NONE = {ctor: "NONE"};
   var CLEAR = {ctor: "CLEAR"};
   var GRAPH = F2(function (a,b) {    return {ctor: "GRAPH",_0: a,_1: b};});
   var fApply = F2(function (f,r) {
      var func = function (x) {    return {ctor: "_Tuple2",_0: x,_1: A2($Functions.$eval,f,x)};};
      return A2($List.map,func,r);
   });
   var buildRange = F3(function (min,max,stp) {    return _U.cmp(min,max) < 0 ? A2($List._op["::"],min,A3(buildRange,min + stp,max,stp)) : _U.list([max]);});
   var graphLineStyle = _U.update($Graphics$Collage.defaultLine,{width: 1.0,color: $Color.white,cap: $Graphics$Collage.Round,join: $Graphics$Collage.Smooth});
   var drawLineSegments = F2(function (_p0,points) {    var _p1 = _p0;return A2($Graphics$Collage.traced,graphLineStyle,$Graphics$Collage.path(points));});
   var graphPoints = function (graphState) {
      var _p2 = graphState;
      var pts = _p2._0;
      var left = _p2._1._0;
      var right = _p2._1._1;
      var sizedUpY = ySizeUp(right);
      var maximize = function (x) {    return {ctor: "_Tuple2",_0: $Basics.fst(x) * (200.0 / right),_1: $Basics.snd(x) * (200.0 / sizedUpY)};};
      var inBoxY = function (x) {    return _U.cmp($Basics.abs($Basics.snd(x)),225) > 0 ? false : true;};
      var boundedPts = A2($List.filter,inBoxY,A2($List.map,maximize,pts));
      var plot = A2(drawLineSegments,{ctor: "_Tuple2",_0: -50,_1: 50},boundedPts);
      return $Graphics$Collage.group(_U.list([plot]));
   };
   var graphBoxBottom = 567;
   var graphBoxTop = 0;
   var graphGridH = 567;
   var graphGridW = 720;
   var tickStrStyle = function (_p3) {
      return $Graphics$Element.leftAligned(A2($Text.color,$Color.white,$Text.italic(A2($Text.height,8,$Text.fromString(_p3)))));
   };
   var numToTickX = function (_p4) {
      var _p5 = _p4;
      var _p6 = _p5._0;
      return A3($Graphics$Collage.collage,
      1000,
      1000,
      _U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: _p6 - 4.0,_1: -5.0},$Graphics$Collage.toForm(tickStrStyle($Basics.toString(_p5._1))))
              ,A2($Graphics$Collage.traced,
              graphLineStyle,
              $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: _p6,_1: -4.0},{ctor: "_Tuple2",_0: _p6,_1: 4.0}])))]));
   };
   var numToTickY = function (_p7) {
      var _p8 = _p7;
      var _p9 = _p8._0;
      return A3($Graphics$Collage.collage,
      1000,
      1000,
      _U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: -5.0,_1: _p9 + 7.0},$Graphics$Collage.toForm(tickStrStyle($Basics.toString(_p8._1))))
              ,A2($Graphics$Collage.traced,
              graphLineStyle,
              $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: -6.0,_1: _p9},{ctor: "_Tuple2",_0: 6.0,_1: _p9}])))]));
   };
   var drawAxes = function (_p10) {
      var _p11 = _p10;
      var _p12 = _p11._1;
      var maximize = function (x) {    return {ctor: "_Tuple2",_0: $Basics.fst(x) * 40.0,_1: $Basics.snd(x) * 20.0};};
      var yAxis = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: -50,_1: 50},
      A2($List.map,maximize,_U.list([{ctor: "_Tuple2",_0: 0,_1: 12.5},{ctor: "_Tuple2",_0: 0,_1: -12.5}])));
      var xAxis = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: -50,_1: 50},
      A2($List.map,maximize,_U.list([{ctor: "_Tuple2",_0: -7.5,_1: 0},{ctor: "_Tuple2",_0: 7.5,_1: 0}])));
      var xArrowLeft = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: 0,_1: 0},
      _U.list([{ctor: "_Tuple2",_0: -296,_1: 4},{ctor: "_Tuple2",_0: -300.0,_1: 0},{ctor: "_Tuple2",_0: -296,_1: -4}]));
      var xArrowRight = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: 0,_1: 0},
      _U.list([{ctor: "_Tuple2",_0: 296,_1: 4},{ctor: "_Tuple2",_0: 300.0,_1: 0},{ctor: "_Tuple2",_0: 296,_1: -4}]));
      var yArrowTop = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: 0,_1: 0},
      _U.list([{ctor: "_Tuple2",_0: 4,_1: 246},{ctor: "_Tuple2",_0: 0,_1: 251},{ctor: "_Tuple2",_0: -4,_1: 246}]));
      var yArrowBottom = A2(drawLineSegments,
      {ctor: "_Tuple2",_0: 0,_1: 0},
      _U.list([{ctor: "_Tuple2",_0: 4,_1: -246},{ctor: "_Tuple2",_0: 0,_1: -251},{ctor: "_Tuple2",_0: -4,_1: -246}]));
      var sizedUpY = ySizeUp(_p12);
      var stepX = graphStepCalc(_p12);
      var stepY = graphStepCalc(sizedUpY);
      var inBoxY = function (x) {    return _U.cmp($Basics.abs($Basics.fst(x)),225) > 0 ? false : true;};
      var tickLocationsX = A3(buildRange,_p11._0,_p12,stepX);
      var tickLocationsY = A3(buildRange,-1 * sizedUpY,sizedUpY,stepY);
      var ticksX = A2($List.map,
      $Graphics$Collage.toForm,
      A2($List.map,numToTickX,A2($List.map,function (x) {    return {ctor: "_Tuple2",_0: x * (200.0 / _p12),_1: x};},tickLocationsX)));
      var ticksY = A2($List.map,
      $Graphics$Collage.toForm,
      A2($List.map,
      numToTickY,
      A2($List.filter,inBoxY,A2($List.map,function (x) {    return {ctor: "_Tuple2",_0: x * (200.0 / sizedUpY),_1: x};},tickLocationsY))));
      return $Graphics$Collage.group($List.concat(_U.list([_U.list([xArrowLeft,xArrowRight,yArrowTop,yArrowBottom,xAxis,yAxis]),ticksX,ticksY])));
   };
   var lightPink = A3($Color.rgb,255,182,193);
   var graphStep = 1.0e-2;
   var stringToGraph = F3(function (s,range,_p13) {
      var _p14 = _p13;
      var func = $Functions.stringToFunction(s);
      var r = A3(buildRange,$Basics.fst(range),$Basics.snd(range),graphStep);
      var _p15 = func;
      if (_p15.ctor === "Ok") {
            return A2(fApply,_p15._0,r);
         } else {
            return _U.list([]);
         }
   });
   var graphUpstate = F2(function (graphEvent,currentState) {
      var _p16 = graphEvent;
      switch (_p16.ctor)
      {case "CLEAR": return initGraphState;
         case "GRAPH": var _p17 = _p16._1;
           return {ctor: "_Tuple2",_0: A3(stringToGraph,_p16._0,_p17,{ctor: "_Tuple2",_0: graphGridW,_1: graphGridH}),_1: _p17};
         default: return currentState;}
   });
   return _elm.Graphing.values = {_op: _op
                                 ,graphStep: graphStep
                                 ,lightPink: lightPink
                                 ,tickStrStyle: tickStrStyle
                                 ,graphGridW: graphGridW
                                 ,graphGridH: graphGridH
                                 ,graphBoxTop: graphBoxTop
                                 ,graphBoxBottom: graphBoxBottom
                                 ,graphLineStyle: graphLineStyle
                                 ,drawLineSegments: drawLineSegments
                                 ,buildRange: buildRange
                                 ,fApply: fApply
                                 ,GRAPH: GRAPH
                                 ,CLEAR: CLEAR
                                 ,NONE: NONE
                                 ,initGraphState: initGraphState
                                 ,graphUpstate: graphUpstate
                                 ,stringToGraph: stringToGraph
                                 ,numToTickX: numToTickX
                                 ,numToTickY: numToTickY
                                 ,graphStepCalc: graphStepCalc
                                 ,ySizeUp: ySizeUp
                                 ,drawAxes: drawAxes
                                 ,graphPoints: graphPoints};
};